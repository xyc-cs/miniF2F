{
    "problem_name": "mathd_numbertheory_221",
    "formal_statement": "theorem mathd_numbertheory_221:\n  \"card {x ::nat. 0 < x \\<and> x < 1000 \\<and> card ({n. n dvd x}) = 3} = 11\"",
    "informal_statement": "How many natural numbers less than 1000 have exactly three distinct positive integer divisors? Show that it is 11.",
    "informal_proof": "By the formula for the total number of positive divisors, only natural numbers in the form $p^{2}$ for some prime $p$ have exactly three positive divisors. Thus we must count the number of primes between 1 and $\\sqrt{1000}$ (the squares of these primes are all the natural numbers less than 1000 that have exactly three positive divisors). There are $11$ such primes: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31.",
    "python_proof": [
        "\n\n        from sympy import *\n        from sympy.ntheory import factorint\n        from sympy.ntheory.primetest import isprime\n        from sympy.ntheory.generate import prime\n        from sympy.ntheory.factor_ import divisors\n        from sympy.ntheory.factor_ import divisors_power\n        from sympy.ntheory.factor_ import divisors_inc\n        from sympy.ntheory.factor_ import divisors_exc\n        from sympy.ntheory.factor_ import divisors_all\n        from sympy.ntheory.factor_ import divisors_proper\n        from sympy.ntheory.factor_ import divisors_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper_inc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper_exc\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper_all\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper_proper\n        from sympy.ntheory.factor_ import divisors_proper_proper_proper_proper_proper_proper_proper_proper_inc\n        from sympy."
    ],
    "header": "(*\n  Authors: Wenda Li\n*)\n\ntheory mathd_numbertheory_221 \n  imports Complex_Main \"HOL-Computational_Algebra.Computational_Algebra\"\n  \"HOL-Number_Theory.Number_Theory\"\nbegin\n\n"
}