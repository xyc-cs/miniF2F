{
    "problem_name": "mathd_numbertheory_92",
    "formal_statement": "theorem mathd_numbertheory_92:\n  fixes n :: nat\n  assumes h0 : \"(5 * n) mod 17 = 8\"\n  shows \"n mod 17 = 5\"",
    "informal_statement": "Solve the congruence $5n \\equiv 8 \\pmod{17}$, as a residue modulo 17.  (Give an answer between 0 and 16.) Show that it is 5.",
    "informal_proof": "Note that $8 \\equiv 25 \\pmod{17}$, so we can write the given congruence as $5n \\equiv 25 \\pmod{17}$.  Since 5 is relatively prime to 17, we can divide both sides by 5, to get $n \\equiv 5 \\pmod{17}$.",
    "python_proof": [
        "\n\n        from sympy import *\n        n, m = symbols('n m')\n        f = 5*n - 8\n        f.factor()\n        f.factor_mod(17)\n        f.factor_mod(17).factor()\n        f.factor_mod(17).factor().factor()\n        f.factor_mod(17).factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor()\n        f.factor_mod(17).factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor().factor"
    ],
    "header": "(*\n  Authors: Albert Qiaochu Jiang\n*)\n\ntheory mathd_numbertheory_92 imports\nComplex_Main\n\nbegin\n\n"
}